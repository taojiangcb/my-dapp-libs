// src/utils/interface-generator.ts
import {
  quicktype,
  InputData,
  jsonInputForTargetLanguage,
} from "quicktype-core";
import path from "path";
import fs from "fs/promises";
import { DappConfig } from "../types/config";

/**
 * 从 JSON 数据生成 TypeScript 接口定义
 * @param jsonData - JSON 字符串
 * @param interfaceName - 生成的接口名称
 * @returns 生成的 TypeScript 接口定义字符串
 */
export async function generateInterface(
  jsonData: string,
  interfaceName: string = "Root"
) {
  const jsonInput = jsonInputForTargetLanguage("typescript");

  // 添加 JSON 样本
  await jsonInput.addSource({
    name: interfaceName,
    samples: [jsonData],
  });

  const inputData = new InputData();
  inputData.addInput(jsonInput);

  // 配置 quicktype 选项并生成接口
  const interfaces = await quicktype({
    inputData,
    lang: "typescript",
    rendererOptions: {
      "just-types": "true",
      "runtime-typecheck": "false",
      "explicit-unions": "true",
    },
  });

  return interfaces.lines.join("\n");
}

/**
 * 保存生成的接口到文件
 * @param config - CLI 配置对象
 * @param filename - 文件名
 * @param content - 接口内容
 */
export async function saveInterface(
  config: DappConfig,
  filename: string,
  content: string
): Promise<void> {
  try {
    // 确保输出目录存在
    await fs.mkdir(config.outputDir, { recursive: true });

    // 构建完整的文件路径
    const filePath = path.join(process.cwd(), config.outputDir, filename);

    // 添加文件头注释
    const fileContent = [
      "/**",
      " * This file is auto-generated by mydapp CLI.",
      " * Do not edit this file manually.",
      " */",
      "",
      content,
    ].join("\n");

    // 保存文件
    await fs.writeFile(filePath, fileContent, "utf8");
    console.log(`Interface saved to ${filePath}`);
  } catch (error) {
    throw new Error(`Failed to save interface: ${error.message}`);
  }
}
